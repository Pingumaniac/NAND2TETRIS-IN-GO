// Boostrap code
@256
D=A
@SP
M=D
// call Sys.init 0
@return_address_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@5
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(return_address_0)
0;JMP
// C_PUSH argument[1]
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer[1]
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH constant[0]
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP that[0]
@0
D=A
@THAT
D=D+M
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// C_PUSH constant[1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP that[1]
@1
D=A
@THAT
D=D+M
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// C_PUSH argument[0]
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[2]
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// C_POP argument[0]
@0
D=A
@ARG
D=D+M
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// label MAIN_LOOP_START
(MAIN_LOOP_START)
// C_PUSH argument[0]
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto COMPUTE_ELEMENT
@SP
AM=M-1
D=M
@COMPUTE_ELEMENT
D;JNE
// goto END_PROGRAM
@END_PROGRAM
0;JMP
// label COMPUTE_ELEMENT
(COMPUTE_ELEMENT)
// C_PUSH that[0]
@0
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH that[1]
@1
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// C_POP that[2]
@2
D=A
@THAT
D=D+M
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// C_PUSH pointer[1]
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// C_POP pointer[1]
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH argument[0]
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// C_POP argument[0]
@0
D=A
@ARG
D=D+M
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// goto MAIN_LOOP_START
@MAIN_LOOP_START
0;JMP
// label END_PROGRAM
(END_PROGRAM)
// function Sys.init0
(Sys.init)
@SP
A=M
D=A
@SP
M=D
// C_PUSH constant[6]
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[8]
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Class1.set 2
@return_address_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@7
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(return_address_0)
// C_POP temp[0]
@0
D=A
@R5
D=D+A
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// C_PUSH constant[23]
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[15]
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Class2.set 2
@return_address_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@7
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(return_address_1)
// C_POP temp[0]
@0
D=A
@R5
D=D+A
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// call Class1.get 0
@return_address_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@5
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(return_address_2)
// call Class2.get 0
@return_address_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@5
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(return_address_3)
// label WHILE
(WHILE)
// goto WHILE
@WHILE
0;JMP
