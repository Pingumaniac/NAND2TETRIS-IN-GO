// Boostrap code
@256
D=A
@SP
M=D
// call Sys.init 0
@return_address_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@5
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(return_address_0)
0;JMP
// function Class1.set0
(Class1.set)
@SP
A=M
D=A
@SP
M=D
// C_PUSH argument[0]
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static[0]
@SP
AM=M-1
D=M
@Class1_0
M=D
// C_PUSH argument[1]
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static[1]
@SP
AM=M-1
D=M
@Class1_1
M=D
// C_PUSH constant[0]
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Class1.get0
(Class1.get)
@SP
A=M
D=A
@SP
M=D
// C_PUSH static[0]
@Class1_0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static[1]
@Class1_1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Class2.set0
(Class2.set)
@SP
A=M
D=A
@SP
M=D
// C_PUSH argument[0]
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static[0]
@SP
AM=M-1
D=M
@Class2_0
M=D
// C_PUSH argument[1]
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static[1]
@SP
AM=M-1
D=M
@Class2_1
M=D
// C_PUSH constant[0]
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Class2.get0
(Class2.get)
@SP
A=M
D=A
@SP
M=D
// C_PUSH static[0]
@Class2_0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static[1]
@Class2_1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Sys.init0
(Sys.init)
@SP
A=M
D=A
@SP
M=D
// C_PUSH constant[6]
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[8]
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Class1.set 2
@return_address_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@7
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(return_address_0)
// C_POP temp[0]
@0
D=A
@R5
D=D+A
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// C_PUSH constant[23]
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant[15]
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Class2.set 2
@return_address_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@7
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(return_address_1)
// C_POP temp[0]
@0
D=A
@R5
D=D+A
@FRAME
M=D
@SP
AM=M-1
D=M
@FRAME
A=M
M=D
// call Class1.get 0
@return_address_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@5
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(return_address_2)
// call Class2.get 0
@return_address_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

D=M
@5
D=D-A
@ARG
M=D

@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(return_address_3)
// label WHILE
(WHILE)
// goto WHILE
@WHILE
0;JMP
